{"version":3,"file":"download.js","sources":["../../../../../src/uni-adapter/methods/download.ts"],"sourcesContent":["import type { AxiosResponse, InternalAxiosRequestConfig } from \"axios\";\nimport { AxiosError, AxiosHeaders } from \"axios\";\n// @ts-expect-error ignore\nimport settle from \"axios/unsafe/core/settle\";\nimport type { Method } from \"../type\";\nimport { progressEventReducer, resolveUniAppRequestOptions } from \"../utils\";\nimport OnCanceled from \"./onCanceled\";\n\nconst download: Method = (config) => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst requestOptions = resolveUniAppRequestOptions(config);\n\t\tconst responseConfig = config as InternalAxiosRequestConfig;\n\t\tresponseConfig.headers = new AxiosHeaders(requestOptions.header);\n\n\t\tconst onCanceled = new OnCanceled(config);\n\t\tlet task: UniApp.DownloadTask | null = uni.downloadFile({\n\t\t\t...requestOptions,\n\t\t\tsuccess(result) {\n\t\t\t\tif (!task) return;\n\n\t\t\t\tconst response: AxiosResponse = {\n\t\t\t\t\tconfig: responseConfig,\n\t\t\t\t\tdata: result.tempFilePath,\n\t\t\t\t\theaders: {},\n\t\t\t\t\tstatus: result.statusCode,\n\t\t\t\t\tstatusText: result.errMsg ?? \"OK\",\n\t\t\t\t\trequest: task,\n\t\t\t\t};\n\t\t\t\tsettle(resolve, reject, response);\n\t\t\t\ttask = null;\n\t\t\t},\n\t\t\tfail(error) {\n\t\t\t\tconst { errMsg = \"\" } = error ?? {};\n\t\t\t\tif (errMsg) {\n\t\t\t\t\tconst isTimeoutError = errMsg === \"downloadFile:fail timeout\";\n\t\t\t\t\tif (isTimeoutError) reject(new AxiosError(errMsg, AxiosError.ETIMEDOUT, responseConfig, task));\n\n\t\t\t\t\tconst isNetworkError = errMsg === \"downloadFile:fail \";\n\t\t\t\t\tif (isNetworkError) {\n\t\t\t\t\t\treject(new AxiosError(errMsg, AxiosError.ERR_NETWORK, responseConfig, task));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treject(new AxiosError(error.errMsg, undefined, responseConfig, task));\n\t\t\t\ttask = null;\n\t\t\t},\n\t\t\tcomplete() {\n\t\t\t\tonCanceled.unsubscribe();\n\t\t\t},\n\t\t});\n\n\t\tif (typeof config.onDownloadProgress === \"function\") {\n\t\t\ttask.onProgressUpdate(progressEventReducer(config.onDownloadProgress, true));\n\t\t}\n\n\t\tif (typeof config.onHeadersReceived === \"function\") task.onHeadersReceived(config.onHeadersReceived);\n\n\t\tonCanceled.subscribe(task, reject);\n\t});\n};\n\nexport default download;\n"],"names":["config","Promise","resolve","reject","requestOptions","resolveUniAppRequestOptions","responseConfig","headers","AxiosHeaders","header","onCanceled","OnCanceled","default","task","uni","downloadFile","success","result","response","data","tempFilePath","status","statusCode","statusText","errMsg","request","fail","error","AxiosError","ETIMEDOUT","ERR_NETWORK","complete","unsubscribe","onDownloadProgress","onProgressUpdate","progressEventReducer","onHeadersReceived","onCanceled$1","subscribe"],"mappings":"ySAQ0BA,GAClB,IAAIC,SAAQ,CAACC,EAASC,KACtB,MAAAC,EAAiBC,8BAA4BL,GAC7CM,EAAiBN,EACvBM,EAAeC,QAAU,IAAIC,eAAaJ,EAAeK,QAEnD,MAAAC,EAAa,IAAIC,EAAAC,QAAWZ,GAC9B,IAAAa,EAAmCC,IAAIC,aAAa,IACpDX,EACH,OAAAY,CAAQC,GACP,IAAKJ,EAAM,OAEX,MAAMK,EAA0B,CAC/BlB,OAAQM,EACRa,KAAMF,EAAOG,aACbb,QAAS,CAAC,EACVc,OAAQJ,EAAOK,WACfC,WAAYN,EAAOO,QAAU,KAC7BC,QAASZ,aAEHX,EAASC,EAAQe,GACjBL,EAAA,IACR,EACA,IAAAa,CAAKC,GACJ,MAAMH,OAAEA,EAAS,IAAOG,GAAS,CAAC,EAClC,GAAIH,EAAQ,CACuB,8BAAXA,GACIrB,EAAA,IAAIyB,aAAWJ,EAAQI,EAAAA,WAAWC,UAAWvB,EAAgBO,IAEtD,uBAAXW,GAEfrB,EAAA,IAAIyB,EAAAA,WAAWJ,EAAQI,aAAWE,YAAaxB,EAAgBO,GACvE,CAEMV,EAAA,IAAIyB,EAAWA,WAAAD,EAAMH,YAAQ,EAAWlB,EAAgBO,IACxDA,EAAA,IACR,EACA,QAAAkB,GACCrB,EAAWsB,aAAY,IAIgB,mBAA9BhC,EAAOiC,oBACjBpB,EAAKqB,iBAAiBC,EAAAA,qBAAqBnC,EAAOiC,oBAAoB,IAG/B,mBAA7BjC,EAAOoC,mBAAuCvB,EAAAuB,kBAAkBpC,EAAOoC,mBAEvEC,EAAAC,UAAUzB,EAAMV,EAAM"}