{"version":3,"file":"request.js","sources":["../../../../../src/uni-adapter/methods/request.ts"],"sourcesContent":["import { AxiosError, AxiosHeaders } from \"axios\";\n// @ts-expect-error ignore\nimport settle from \"axios/unsafe/core/settle\";\nimport { resolveUniAppRequestOptions } from \"../utils\";\nimport OnCanceled from \"./onCanceled\";\nimport type { Method } from \"../type\";\nimport type { AxiosResponse, InternalAxiosRequestConfig } from \"axios\";\n\nconst request: Method = (config) => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst requestOptions = resolveUniAppRequestOptions(config);\n\t\tconst responseConfig = config as InternalAxiosRequestConfig;\n\t\tresponseConfig.headers = new AxiosHeaders(requestOptions.header);\n\n\t\tconst onCanceled = new OnCanceled(config);\n\t\tlet task: UniApp.RequestTask | null = uni.request({\n\t\t\t...requestOptions,\n\t\t\tsuccess(result) {\n\t\t\t\tif (!task) return;\n\n\t\t\t\tconst headers = new AxiosHeaders(result.header);\n\t\t\t\tconst response: AxiosResponse = {\n\t\t\t\t\tconfig: responseConfig,\n\t\t\t\t\tdata: result.data,\n\t\t\t\t\theaders,\n\t\t\t\t\tstatus: result.statusCode,\n\t\t\t\t\tstatusText: result.errMsg ?? \"OK\",\n\t\t\t\t\trequest: task,\n\t\t\t\t\tcookies: result.cookies,\n\t\t\t\t};\n\t\t\t\tsettle(resolve, reject, response);\n\t\t\t\ttask = null;\n\t\t\t},\n\t\t\tfail(error) {\n\t\t\t\tconst { errMsg = \"\" } = error ?? {};\n\t\t\t\tif (errMsg) {\n\t\t\t\t\tconst isTimeoutError = errMsg === \"request:fail timeout\";\n\t\t\t\t\tconst isNetworkError = errMsg === \"request:fail \";\n\t\t\t\t\tif (isTimeoutError) reject(new AxiosError(errMsg, AxiosError.ETIMEDOUT, responseConfig, task));\n\n\t\t\t\t\tif (isNetworkError) {\n\t\t\t\t\t\treject(new AxiosError(errMsg, AxiosError.ERR_NETWORK, responseConfig, task));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treject(new AxiosError(error.errMsg, undefined, responseConfig, task));\n\t\t\t\ttask = null;\n\t\t\t},\n\t\t\tcomplete() {\n\t\t\t\tonCanceled.unsubscribe();\n\t\t\t},\n\t\t});\n\n\t\tif (typeof config.onHeadersReceived === \"function\") task.onHeadersReceived(config.onHeadersReceived);\n\n\t\tonCanceled.subscribe(task, reject);\n\t});\n};\n\nexport default request;\n"],"names":["config","Promise","resolve","reject","requestOptions","resolveUniAppRequestOptions","responseConfig","headers","AxiosHeaders","header","onCanceled","OnCanceled","default","task","uni","request","success","result","response","data","status","statusCode","statusText","errMsg","cookies","fail","error","isNetworkError","AxiosError","ETIMEDOUT","ERR_NETWORK","complete","unsubscribe","onHeadersReceived","onCanceled$1","subscribe"],"mappings":"ySAQyBA,GACjB,IAAIC,SAAQ,CAACC,EAASC,KACtB,MAAAC,EAAiBC,8BAA4BL,GAC7CM,EAAiBN,EACvBM,EAAeC,QAAU,IAAIC,eAAaJ,EAAeK,QAEnD,MAAAC,EAAa,IAAIC,EAAAC,QAAWZ,GAC9B,IAAAa,EAAkCC,IAAIC,QAAQ,IAC9CX,EACH,OAAAY,CAAQC,GACP,IAAKJ,EAAM,OAEX,MAAMN,EAAU,IAAIC,eAAaS,EAAOR,QAClCS,EAA0B,CAC/BlB,OAAQM,EACRa,KAAMF,EAAOE,KACbZ,UACAa,OAAQH,EAAOI,WACfC,WAAYL,EAAOM,QAAU,KAC7BR,QAASF,EACTW,QAASP,EAAOO,mBAEVtB,EAASC,EAAQe,GACjBL,EAAA,IACR,EACA,IAAAY,CAAKC,GACJ,MAAMH,OAAEA,EAAS,IAAOG,GAAS,CAAC,EAClC,GAAIH,EAAQ,CACX,MACMI,EAA4B,kBAAXJ,EADW,yBAAXA,GAEIpB,EAAA,IAAIyB,aAAWL,EAAQK,EAAAA,WAAWC,UAAWvB,EAAgBO,IAEpFc,GACIxB,EAAA,IAAIyB,EAAAA,WAAWL,EAAQK,aAAWE,YAAaxB,EAAgBO,GACvE,CAEMV,EAAA,IAAIyB,EAAWA,WAAAF,EAAMH,YAAQ,EAAWjB,EAAgBO,IACxDA,EAAA,IACR,EACA,QAAAkB,GACCrB,EAAWsB,aAAY,IAIe,mBAA7BhC,EAAOiC,mBAAuCpB,EAAAoB,kBAAkBjC,EAAOiC,mBAEvEC,EAAAC,UAAUtB,EAAMV,EAAM"}