{"version":3,"file":"index.js","sources":["../../../../src/axios/index.ts"],"sourcesContent":["import axios, { AxiosError } from \"axios\";\nimport { isNil, isObject, isString } from \"lodash-unified\";\nimport { createUniAppAxiosAdapter } from \"../uni-adapter\";\nimport { useFastAxios } from \"./fastAxios\";\nimport type { ApiResponse, AxiosOptions, FastAxiosRequestConfig } from \"./types\";\nimport type { AxiosRequestConfig, AxiosResponse, InternalAxiosRequestConfig } from \"axios\";\n\nconst axiosOptions: AxiosOptions = {\n\tcancelDuplicateRequest: true,\n\tloading: false,\n\tloadingText: \"加载中...\",\n\tcache: false,\n\tgetMethodCacheHandle: true,\n\tsimpleDataFormat: true,\n\tshowErrorMessage: true,\n\tshowCodeMessage: true,\n\tautoDownloadFile: true,\n\trestfulResult: true,\n};\n\nconst pendingMap = new Map();\n\n/**\n * 生成每个请求的唯一key\n */\nconst getPendingKey = (axiosConfig: AxiosRequestConfig): string => {\n\tlet { data } = axiosConfig;\n\tconst { url, method, params } = axiosConfig;\n\t// response里面返回的config.data是个字符串对象\n\tif (isString(data)) data = JSON.parse(data);\n\treturn [url, method, JSON.stringify(params), JSON.stringify(data)].join(\"&\");\n};\n\n/**\n * 储存每个请求的唯一cancel回调, 以此为标识\n */\nconst addPending = (pendingKey: string, axiosConfig: AxiosRequestConfig): void => {\n\taxiosConfig.cancelToken =\n\t\taxiosConfig.cancelToken ||\n\t\tnew axios.CancelToken((cancel) => {\n\t\t\tif (!pendingMap.has(pendingKey)) {\n\t\t\t\tpendingMap.set(pendingKey, cancel);\n\t\t\t}\n\t\t});\n};\n\n/**\n * 删除重复的请求\n */\nconst removePending = (pendingKey: string): void => {\n\tif (pendingMap.has(pendingKey)) {\n\t\tconst cancelToken = pendingMap.get(pendingKey);\n\t\tcancelToken(pendingKey);\n\t\tpendingMap.delete(pendingKey);\n\t}\n};\n\n/**\n * Http 错误状态码处理\n */\nconst httpErrorStatusHandle = async (error: AxiosError | any): Promise<string> => {\n\tlet message = \"\";\n\t// 其他错误码处理\n\t// 尝试获取 Restful 风格返回Code，或者获取响应状态码\n\tconst code = error?.response?.data?.code || error?.response?.status || error?.code || \"default\";\n\t// 400业务异常\n\t// 500服务器内部错误，可能返回错误信息\n\t// 判断响应类型是否为blob\n\tif (error?.request?.responseType === \"blob\") {\n\t\ttry {\n\t\t\tmessage = JSON.parse(await error?.response?.data?.text())?.message;\n\t\t} catch (err) {\n\t\t\tmessage = error?.response?.data?.message || useFastAxios().errorCode[code];\n\t\t}\n\t} else {\n\t\tmessage = error?.response?.data?.message || useFastAxios().errorCode[code];\n\t}\n\treturn message;\n};\n\n/**\n * 下载文件\n */\nconst downloadFile = (response: AxiosResponse): void => {\n\tif (typeof uni !== \"undefined\") {\n\t\t// 暂不支持\n\t} else {\n\t\tconst blob = new Blob([response.data], { type: \"application/octet-stream;charset=UTF-8\" });\n\t\tconst contentDisposition = response.headers[\"content-disposition\"];\n\t\tconst pat = new RegExp(\"filename=([^;]+\\\\.[^\\\\.;]+);*\");\n\t\tconst result = pat.exec(contentDisposition);\n\t\tconst filename = result[1];\n\t\tconst downloadElement = document.createElement(\"a\");\n\t\tconst href = window.URL.createObjectURL(blob); // 创建下载的链接\n\t\tconst reg = /^[\"](.*)[\"]$/g;\n\t\tdownloadElement.style.display = \"none\";\n\t\tdownloadElement.href = href;\n\t\tdownloadElement.download = decodeURI(filename.replace(reg, \"$1\")); // 下载后文件名\n\t\tdocument.body.appendChild(downloadElement);\n\t\t// 点击下载\n\t\tdownloadElement.click();\n\t\t// 下载完成移除元素\n\t\tdocument.body.removeChild(downloadElement);\n\t\twindow.URL.revokeObjectURL(href);\n\t}\n};\n\n/**\n * 创建 Axios\n * @param axiosConfig axios 请求配置\n * @param loading loading配置\n */\nconst createAxios = <Output = any, Input = any>(axiosConfig: FastAxiosRequestConfig<Input>): Promise<Output> => {\n\tconst fastAxios = useFastAxios();\n\n\t// 合并选项\n\tconst options = { ...axiosOptions, ...axiosConfig };\n\n\tif (isNil(options.requestCipher)) {\n\t\toptions.requestCipher = fastAxios.requestCipher;\n\t}\n\n\t// 只有Get请求并且开启了简洁响应才可以进行缓存处理，且默认是不存在loading的\n\tif (options.cache && options.method.toUpperCase() === \"GET\" && options.restfulResult && options.simpleDataFormat) {\n\t\t// 如果启用缓存，则默认是不能携带参数的\n\t\tif (options.params) {\n\t\t\tconsole.warn(\"[Fast.Axios] 如果使用 Http Cache，则不能存在任何 'params' 参数\");\n\t\t}\n\n\t\tif (fastAxios.cache?.get) {\n\t\t\tconst cacheRes = fastAxios.cache.get(options.url);\n\t\t\tif (cacheRes) {\n\t\t\t\treturn Promise.resolve(cacheRes);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// 不满足上述条件，则默认不使用缓存\n\t\toptions.cache = false;\n\t}\n\n\t// 获取请求唯一 Key\n\tconst pendingKey = getPendingKey(axiosConfig);\n\n\tconst timestamp = Date.now();\n\n\t// 创建 Axios 请求\n\tconst Axios = axios.create({\n\t\t/** 如果是 UniApp 则默认使用适配器 */\n\t\tadapter: typeof uni !== \"undefined\" ? createUniAppAxiosAdapter() : undefined,\n\t\tbaseURL: fastAxios.baseUrl,\n\t\ttimeout: fastAxios.timeout,\n\t\theaders: fastAxios.headers,\n\t\tresponseType: \"json\",\n\t});\n\n\t/**\n\t * 请求拦截\n\t */\n\tAxios.interceptors.request.use(\n\t\t(config: InternalAxiosRequestConfig<Input>) => {\n\t\t\t// 删除重复请求\n\t\t\tremovePending(pendingKey);\n\n\t\t\t// 判断是否开启取消重复请求\n\t\t\toptions.cancelDuplicateRequest && addPending(pendingKey, config);\n\n\t\t\t// 自定义请求拦截器\n\t\t\tfastAxios.interceptors?.request(config);\n\n\t\t\t// 判断是否显示loading层\n\t\t\toptions.loading && fastAxios.loading?.show(options.loadingText);\n\n\t\t\tif (config.responseType === \"json\") {\n\t\t\t\t// 请求参数加密\n\t\t\t\tif (options.requestCipher) {\n\t\t\t\t\tfastAxios.crypto?.encrypt(config, timestamp);\n\t\t\t\t} else {\n\t\t\t\t\t// Get请求缓存处理\n\t\t\t\t\tif (options.getMethodCacheHandle && config.method.toUpperCase() === \"GET\") {\n\t\t\t\t\t\tconfig.params = config.params || {};\n\t\t\t\t\t\tconfig.params._ = timestamp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn config;\n\t\t},\n\t\t(error) => {\n\t\t\tconsole.error(\"[Fast.Axios]\", error);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t);\n\n\t/**\n\t * 响应拦截\n\t */\n\tAxios.interceptors.response.use(\n\t\t(response: AxiosResponse<Output, Input>) => {\n\t\t\t// 删除重复请求标识\n\t\t\tremovePending(pendingKey);\n\n\t\t\t// 关闭loading层\n\t\t\toptions.loading && fastAxios.loading?.close(options);\n\n\t\t\t// 自定义响应拦截器\n\t\t\tif (fastAxios.interceptors?.response) {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = fastAxios.interceptors.response(response, options);\n\t\t\t\t\tif (!isNil(result)) {\n\t\t\t\t\t\treturn Promise.resolve(result);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(\"[Fast.Axios]\", error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (response.config.responseType === \"blob\" || options.method.toUpperCase() === \"DOWNLOAD\") {\n\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t// 判断是否自动下载\n\t\t\t\t\tif (options.autoDownloadFile) {\n\t\t\t\t\t\tdownloadFile(response);\n\t\t\t\t\t}\n\t\t\t\t\t// 这里直接返回\n\t\t\t\t\treturn Promise.resolve(response);\n\t\t\t\t} else {\n\t\t\t\t\tfastAxios.message?.error(fastAxios.errorCode[\"fileDownloadError\"]);\n\t\t\t\t\treturn Promise.reject(response);\n\t\t\t\t}\n\t\t\t} else if (response.config.responseType === \"json\") {\n\t\t\t\tlet responseData = response.data;\n\t\t\t\tif (options.restfulResult) {\n\t\t\t\t\tconst restfulData = responseData as ApiResponse<Output, Input>;\n\t\t\t\t\tconst code: number = restfulData?.code ?? response.status;\n\t\t\t\t\tif (code < 200 || code > 299 || restfulData?.success === false) {\n\t\t\t\t\t\t// 判断是否显示错误消息\n\t\t\t\t\t\tif (options.showCodeMessage) {\n\t\t\t\t\t\t\t// 判断返回的 message 是否为对象类型\n\t\t\t\t\t\t\tif (restfulData?.message) {\n\t\t\t\t\t\t\t\tif (isObject(restfulData?.message)) {\n\t\t\t\t\t\t\t\t\tfastAxios.message?.error(JSON.stringify(restfulData?.message));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfastAxios.message?.error(restfulData?.message);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.error(\"[Fast.Axios]\", new AxiosError(restfulData?.message ?? \"服务器内部错误！\"));\n\t\t\t\t\t\treturn Promise.reject(new AxiosError(restfulData?.message ?? \"服务器内部错误！\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 请求响应解密\n\t\t\t\tif (options.requestCipher) {\n\t\t\t\t\tresponseData = fastAxios.crypto?.decrypt(response, options);\n\t\t\t\t}\n\n\t\t\t\t// 判断是否缓存\n\t\t\t\tif (options.cache && options.restfulResult && options.simpleDataFormat) {\n\t\t\t\t\tfastAxios.cache?.set(options.url, (responseData as ApiResponse<Output, Input>)?.data);\n\t\t\t\t}\n\n\t\t\t\tif (options.simpleDataFormat) {\n\t\t\t\t\treturn Promise.resolve((responseData as ApiResponse<Output, Input>)?.data);\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.resolve(responseData);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (options.simpleDataFormat) {\n\t\t\t\t\treturn Promise.resolve(response.data);\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.resolve(response);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tasync (error: AxiosError) => {\n\t\t\t// 删除重复请求标识\n\t\t\tremovePending(pendingKey);\n\n\t\t\t// 关闭loading层\n\t\t\toptions.loading && fastAxios.loading?.close(options);\n\n\t\t\t// 判断请求是否被取消\n\t\t\tif (axios.isCancel(error)) {\n\t\t\t\tconsole.warn(`[Fast.Axios] ${fastAxios.errorCode[\"cancelDuplicate\"]}`);\n\t\t\t\treturn Promise.reject();\n\t\t\t}\n\n\t\t\t// 判断是否断网\n\t\t\tif (!globalThis.navigator.onLine) {\n\t\t\t\tfastAxios.message?.error(fastAxios.errorCode[\"offLine\"]);\n\t\t\t\treturn Promise.reject();\n\t\t\t}\n\n\t\t\t// 自定义响应错误拦截器\n\t\t\tif (fastAxios.interceptors?.responseError) {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = fastAxios.interceptors.responseError(error, options);\n\t\t\t\t\tif (!isNil(result)) {\n\t\t\t\t\t\treturn Promise.reject(result);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(\"[Fast.Axios]\", error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 处理错误状态码\n\t\t\tif (options.showErrorMessage) {\n\t\t\t\tconst message = await httpErrorStatusHandle(error);\n\t\t\t\tfastAxios.message?.error(message);\n\t\t\t}\n\n\t\t\t// 错误继续返回给到具体页面\n\t\t\tconsole.error(\"[Fast.Axios]\", error);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t);\n\n\treturn Axios(options);\n};\n\nexport const axiosUtil = {\n\t/**\n\t * 请求\n\t * @param axiosConfig axios 请求配置\n\t * @param loading loading配置\n\t */\n\trequest: createAxios,\n\t/**\n\t * 下载文件\n\t */\n\tdownloadFile,\n};\n\nexport * from \"./types/options\";\nexport * from \"./fastAxios\";\n"],"names":["axiosOptions","cancelDuplicateRequest","loading","loadingText","cache","getMethodCacheHandle","simpleDataFormat","showErrorMessage","showCodeMessage","autoDownloadFile","restfulResult","pendingMap","Map","removePending","pendingKey","has","get","cancelToken","delete","downloadFile","response","uni","blob","Blob","data","type","contentDisposition","headers","filename","RegExp","exec","downloadElement","document","createElement","href","window","URL","createObjectURL","reg","style","display","download","decodeURI","replace","body","appendChild","click","removeChild","revokeObjectURL","axiosUtil","request","axiosConfig","fastAxios","useFastAxios","options","isNil","requestCipher","method","toUpperCase","params","console","warn","cacheRes","url","Promise","resolve","isString","JSON","parse","stringify","join","getPendingKey","timestamp","Date","now","Axios","axios","create","adapter","createUniAppAxiosAdapter","baseURL","baseUrl","timeout","responseType","interceptors","use","config","CancelToken","cancel","set","addPending","show","_c","fastAxios$1","crypto","encrypt","_","error","reject","close","result","status","message","errorCode","responseData","restfulData","code","success","isObject","_d","_e","AxiosError","_f","decrypt","async","isCancel","globalThis","navigator","onLine","responseError","_b","_a","_g","text","err","_i","_h","_k","_j","httpErrorStatusHandle"],"mappings":"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"}