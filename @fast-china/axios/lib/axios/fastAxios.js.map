{"version":3,"file":"fastAxios.js","sources":["../../../../src/axios/fastAxios.ts"],"sourcesContent":["import type { AxiosHeaderValue } from \"axios\";\nimport { AxiosError } from \"axios\";\nimport { isNil } from \"lodash-unified\";\nimport { CacheManage, CryptoManage, InterceptorsManage, LoadingManage, MessageBoxManage, MessageManage } from \"./types\";\n\n// eslint-disable-next-line no-use-before-define\ntype InitializeOptions = Partial<Pick<FastAxios, \"baseUrl\" | \"timeout\" | \"headers\" | \"requestCipher\">>;\n\ntype CodeKeyType = string | number;\n\nclass FastAxios {\n\t// eslint-disable-next-line no-use-before-define\n\tstatic instance: FastAxios;\n\n\tconstructor(options?: InitializeOptions) {\n\t\tthis.baseUrl = options?.baseUrl;\n\t\tthis.timeout = options?.timeout ?? 60000;\n\t\tthis.headers = options?.headers ?? {};\n\t\tthis.requestCipher = isNil(options.requestCipher) ? true : false;\n\n\t\tthis.errorCode = {\n\t\t\tcancelDuplicate: \"重复请求，自动取消！\",\n\t\t\toffLine: \"您断网了！\",\n\t\t\tfileDownloadError: \"文件下载失败或此文件不存在！\",\n\t\t\t302: \"接口重定向了！\",\n\t\t\t400: \"参数不正确！\",\n\t\t\t401: \"您没有权限操作（令牌、用户名、密码错误）！\",\n\t\t\t403: \"您的访问是被禁止的！\",\n\t\t\t404: \"请求的资源不存在！\",\n\t\t\t405: \"请求的格式不正确！\",\n\t\t\t408: \"请求超时！\",\n\t\t\t409: \"系统已存在相同数据！\",\n\t\t\t410: \"请求的资源被永久删除，且不会再得到的！\",\n\t\t\t422: \"当创建一个对象时，发生一个验证错误！\",\n\t\t\t429: \"请求过于频繁，请稍后再试！\",\n\t\t\t500: \"服务器内部错误！\",\n\t\t\t501: \"服务未实现！\",\n\t\t\t502: \"网关错误！\",\n\t\t\t503: \"服务不可用，服务器暂时过载或维护！\",\n\t\t\t504: \"服务暂时无法访问，请稍后再试！\",\n\t\t\t505: \"HTTP版本不受支持！\",\n\t\t\t[AxiosError.ETIMEDOUT]: \"请求超时！\",\n\t\t\t[AxiosError.ECONNABORTED]: \"连接中断，服务器暂时过载或维护！\",\n\t\t\t[AxiosError.ERR_NETWORK]: \"网关错误，服务不可用，服务器暂时过载或维护！\",\n\t\t};\n\n\t\tthis.loading = new LoadingManage();\n\t\tthis.message = new MessageManage();\n\t\tthis.messageBox = new MessageBoxManage();\n\t\tthis.cache = new CacheManage();\n\t\tthis.crypto = new CryptoManage();\n\t\tthis.interceptors = new InterceptorsManage();\n\t}\n\n\t/** 请求域名或者Base路径 */\n\treadonly baseUrl: string;\n\n\t/**\n\t * 超时时间，单位毫秒\n\t * @default 60000\n\t */\n\treadonly timeout: number;\n\n\t/** 默认头部 */\n\treadonly headers: {\n\t\t[key: string]: AxiosHeaderValue;\n\t};\n\n\t/**\n\t * 请求加密解密\n\t * @default true\n\t */\n\treadonly requestCipher: boolean;\n\n\t/** 错误Code */\n\treadonly errorCode: Record<CodeKeyType, string>;\n\n\t/** 加载 @description 需要自行处理多次调用的问题 */\n\treadonly loading: LoadingManage;\n\n\t/** 消息提示 */\n\treadonly message: MessageManage;\n\n\t/** 消息提示框 */\n\treadonly messageBox: MessageBoxManage;\n\n\t/** 缓存 */\n\treadonly cache: CacheManage;\n\n\t/** 加密解密 */\n\treadonly crypto: CryptoManage;\n\n\t/** 拦截器 */\n\treadonly interceptors: InterceptorsManage;\n\n\t/** 添加错误Code */\n\taddErrorCode(key: CodeKeyType, message: string): FastAxios;\n\t/** 添加错误Code */\n\taddErrorCode(codes: Record<CodeKeyType, string>): FastAxios;\n\n\taddErrorCode(arg: CodeKeyType | Record<CodeKeyType, string>, message?: string): FastAxios {\n\t\tif (typeof arg === \"string\" || typeof arg === \"number\") {\n\t\t\tthis.errorCode[arg] = message;\n\t\t} else {\n\t\t\tfor (const key in arg) {\n\t\t\t\tthis.errorCode[key] = arg[key];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n}\n\n/**\n * 初始化 fast-axios\n * @param options 基础选项\n * @param newInstance 是否强制创建新的实例\n * @returns\n */\nexport const createFastAxios = (options?: InitializeOptions, newInstance = false): FastAxios => {\n\tif (newInstance) {\n\t\treturn new FastAxios(options);\n\t} else {\n\t\tif (!FastAxios.instance) {\n\t\t\tconst fastAxios = new FastAxios(options);\n\t\t\tFastAxios.instance = fastAxios;\n\t\t}\n\t\treturn FastAxios.instance;\n\t}\n};\n\n/**\n * 获取 fast-axios 实例\n */\nexport const useFastAxios = (): FastAxios => {\n\tif (!FastAxios.instance) {\n\t\tthrow new Error(\"请先调用 'createFastAxios' 初始化 'fast-axios'。\");\n\t}\n\n\treturn FastAxios.instance;\n};\n"],"names":["FastAxios","constructor","options","__publicField","this","baseUrl","timeout","headers","requestCipher","isNil","errorCode","cancelDuplicate","offLine","fileDownloadError","AxiosError","ETIMEDOUT","ECONNABORTED","ERR_NETWORK","loading","LoadingManage","message","MessageManage","messageBox","MessageBoxManage","cache","CacheManage","crypto","CryptoManage","interceptors","InterceptorsManage","addErrorCode","arg","key","newInstance","instance","fastAxios","Error"],"mappings":"sgBAUA,MAAMA,EAIL,WAAAC,CAAYC,GAyCHC,EAAAC,KAAA,WAMAD,EAAAC,KAAA,WAGAD,EAAAC,KAAA,WAQAD,EAAAC,KAAA,iBAGAD,EAAAC,KAAA,aAGAD,EAAAC,KAAA,WAGAD,EAAAC,KAAA,WAGAD,EAAAC,KAAA,cAGAD,EAAAC,KAAA,SAGAD,EAAAC,KAAA,UAGAD,EAAAC,KAAA,gBA9ERA,KAAKC,QAAmB,MAATH,OAAS,EAAAA,EAAAG,QACnBD,KAAAE,eAAUJ,WAASI,UAAW,IAC9BF,KAAAG,SAAmB,MAATL,OAAS,EAAAA,EAAAK,UAAW,CAAC,EACpCH,KAAKI,gBAAgBC,EAAAA,MAAMP,EAAQM,eAEnCJ,KAAKM,UAAY,CAChBC,gBAAiB,aACjBC,QAAS,QACTC,kBAAmB,iBACnB,IAAK,UACL,IAAK,SACL,IAAK,wBACL,IAAK,aACL,IAAK,YACL,IAAK,YACL,IAAK,QACL,IAAK,aACL,IAAK,sBACL,IAAK,qBACL,IAAK,gBACL,IAAK,WACL,IAAK,SACL,IAAK,QACL,IAAK,oBACL,IAAK,kBACL,IAAK,cACL,CAACC,EAAAA,WAAWC,WAAY,QACxB,CAACD,EAAAA,WAAWE,cAAe,mBAC3B,CAACF,EAAAA,WAAWG,aAAc,0BAGtBb,KAAAc,QAAU,IAAIC,gBACdf,KAAAgB,QAAU,IAAIC,gBACdjB,KAAAkB,WAAa,IAAIC,mBACjBnB,KAAAoB,MAAQ,IAAIC,cACZrB,KAAAsB,OAAS,IAAIC,eACbvB,KAAAwB,aAAe,IAAIC,oBAAmB,CAiD5C,YAAAC,CAAaC,EAAgDX,GAC5D,GAAmB,iBAARW,GAAmC,iBAARA,EAChC3B,KAAAM,UAAUqB,GAAOX,OAEtB,IAAA,MAAWY,KAAOD,EACjB3B,KAAKM,UAAUsB,GAAOD,EAAIC,GAGrB,OAAA5B,IAAA,EAhGRD,EAFKH,EAEE,oCA0GuB,CAACE,EAA6B+B,GAAc,KAC1E,GAAIA,EACI,OAAA,IAAIjC,EAAUE,GAEjB,IAACF,EAAUkC,SAAU,CAClB,MAAAC,EAAY,IAAInC,EAAUE,GAChCF,EAAUkC,SAAWC,CAAA,CAEtB,OAAOnC,EAAUkC,QAAA,uBAOS,KACvB,IAAClC,EAAUkC,SACR,MAAA,IAAIE,MAAM,4CAGjB,OAAOpC,EAAUkC,QAAA"}